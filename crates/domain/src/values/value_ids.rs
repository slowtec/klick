use derive_more::From;
use serde::{Deserialize, Serialize};
use strum::AsRefStr;

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, AsRefStr, Serialize, Deserialize, From)]
pub enum InputValueId {
    PlantName,
    PopulationEquivalent,
    Wastewater,
    InfluentNitrogen,
    InfluentChemicalOxygenDemand,
    InfluentTotalOrganicCarbohydrates,
    EffluentNitrogen,
    EffluentChemicalOxygenDemand,
    SideStreamTreatmentTotalNitrogen,
    OperatingMaterialFeCl3,
    OperatingMaterialFeClSO4,
    OperatingMaterialCaOH2,
    OperatingMaterialSyntheticPolymers,
    SensitivityN2OCalculationMethod,
    SensitivityN2OCustomFactor,
    SensitivityN2OSideStreamFactor,
    SensitivityCH4ChpCalculationMethod,
    SensitivityCH4ChpCustomFactor,
    SensitivityCO2FossilCustomFactor,
    SensitivitySludgeBagsCustomFactor,
    SensitivitySludgeStorageCustomFactor,
    SludgeTreatmentBags,
    SludgeTreatmentStorageContainers,
    SludgeTreatmentDisposal,
    SludgeTreatmentTransportDistance,
    SludgeTreatmentDigesterCount,
    SewageGasProduced,
    MethaneFraction,
    GasSupply,
    PurchaseOfBiogas,
    TotalPowerConsumption,
    OnSitePowerGeneration,
    EmissionFactorElectricityMix,
    HeatingOil,
    ScenarioN2OSideStreamFactor,
    ScenarioN2OSideStreamCoverIsOpen,
    ScenarioProcessEnergySaving,
    ScenarioFossilEnergySaving,
    ScenarioDistrictHeating,
    ScenarioPhotovoltaicEnergyExpansion,
    ScenarioEstimatedSelfPhotovolaticUsage,
    ScenarioWindEnergyExpansion,
    ScenarioEstimatedSelfWindEnergyUsage,
    ScenarioWaterEnergyExpansion,
    ScenarioEstimatedSelfWaterEnergyUsage,
}
